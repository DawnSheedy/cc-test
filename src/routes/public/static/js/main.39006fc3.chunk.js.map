{"version":3,"sources":["App.js","elements/speaker-creator.js","elements/speaker-list-item.js","elements/speaker-list.js","elements/caption-box.js","elements/caption-list-item.js","elements/event-list.js","pages/MainPage.js","pages/LoginPage.js","serviceWorker.js","index.js"],"names":["socket","user","SpeakerCreator","props","state","speakerName","handleChange","bind","handleSubmit","createSpeaker","event","this","setState","target","value","preventDefault","emit","name","document","getElementById","InputGroup","className","onChange","onKeyPress","key","FormControl","id","placeholder","Append","Button","variant","onClick","Component","SpeakerListItem","releaseSpeaker","deleteSpeaker","claimSpeaker","speakerId","speaker","ListGroup","Item","writer","writerId","Row","Col","isAdmin","href","assignment","SpeakerList","speakers","handleSpeakerEvent","speakerCompare","on","data","console","log","newSpeakers","found","forEach","status","push","sort","JSON","stringify","a","b","map","getHeader","drawSpeakerList","CaptionBox","caption","createCaption","charAt","substr","disabled","length","charCode","CaptionListItem","deleteCaption","captionId","cancelled","sent","EventList","scrollToBottom","messagesEnd","scrollIntoView","behavior","captions","handleCaptionEvent","newCaptions","style","height","xs","class","drawCaptionList","float","clear","ref","el","width","bottom","position","MainPage","currentSpeaker","margin","md","lg","LoginPage","setToken","Container","span","offset","Card","Body","Title","Subtitle","Form","onSubmit","Label","Control","type","Text","App","useState","auth","setAuth","startSocketAndAuth","openSocket","token","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"yNAKIA,EACAC,E,sHC4CWC,E,kDA7CX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAEDC,MAAQ,CACTC,YAAa,IAGjB,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBACpB,EAAKE,cAAe,EAAKA,cAAcF,KAAnB,gBATL,E,yDAYNG,GACTC,KAAKC,SAAS,CAAEP,YAAaK,EAAMG,OAAOC,U,mCAGjCJ,GACTC,KAAKF,gBACLC,EAAMK,mB,sCAIDJ,KAAKP,MAAMC,cAChBM,KAAKR,MAAMH,OAAOgB,KAAK,cAAe,CAAEC,KAAMN,KAAKP,MAAMC,cACzDa,SAASC,eAAe,qBAAqBL,MAAQ,GACrDH,KAAKC,SAAS,CAACP,YAAa,Q,+BAGtB,IAAD,OACL,OAAQ,6BACJ,kBAACe,EAAA,EAAD,CAAYC,UAAU,OAAOC,SAAUX,KAAKL,aAAcQ,MAAOH,KAAKP,MAAMC,YAAakB,WAAY,SAAAb,GAA4B,UAAdA,EAAMc,KACrH,EAAKf,kBAEL,kBAACgB,EAAA,EAAD,CAAaC,GAAG,oBACZC,YAAY,iBAEhB,kBAACP,EAAA,EAAWQ,OAAZ,KACI,kBAACC,EAAA,EAAD,CAAQC,QAAQ,kBAAkBC,QAASpB,KAAKH,cAAhD,YAGR,kC,GA1CiBwB,a,SC6CdC,E,kDA3CX,WAAY9B,GAAQ,IAAD,8BACf,cAAMA,IACD+B,eAAiB,EAAKA,eAAe3B,KAApB,gBACtB,EAAK4B,cAAgB,EAAKA,cAAc5B,KAAnB,gBACrB,EAAK6B,aAAe,EAAKA,aAAa7B,KAAlB,gBAJL,E,6DAQfI,KAAKR,MAAMH,OAAOgB,KAAK,UAAW,CAACqB,UAAW1B,KAAKR,MAAMmC,QAAQZ,O,sCAIjEf,KAAKR,MAAMH,OAAOgB,KAAK,iBAAkB,CAACqB,UAAW1B,KAAKR,MAAMmC,QAAQZ,O,qCAIxEf,KAAKR,MAAMH,OAAOgB,KAAK,gBAAiB,CAACqB,UAAW1B,KAAKR,MAAMmC,QAAQZ,O,+BAIvE,OAAO,yBAAKL,UAAU,wBAAuB,kBAACkB,EAAA,EAAUC,KAAX,CAAgBV,QAASnB,KAAKR,MAAMmC,QAAQG,OACzF9B,KAAKR,MAAMmC,QAAQG,OAAOf,KAAKf,KAAKR,MAAMF,KAAKyC,SAAW,UAAY,UACpE,UACE,4BAAK/B,KAAKR,MAAMmC,QAAQrB,MACxB,kBAAC0B,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KAAOjC,KAAKR,MAAMmC,QAAQG,OAAU,0CAAgB9B,KAAKR,MAAMmC,QAAQG,OAAOxB,MAAY,yCAEzFN,KAAKR,MAAMF,KAAK4C,QAAU,kBAACD,EAAA,EAAD,CAAKvB,UAAU,cAAeV,KAAKR,MAAMmC,QAAQG,OAC5E,uBAAGK,KAAK,IAAIf,QAASpB,KAAKuB,gBAA1B,WACA,uBAAGY,KAAK,IAAIf,QAASpB,KAAKwB,eAA1B,WAGA,kBAACS,EAAA,EAAD,CAAKvB,UAAU,cAAiBV,KAAKR,MAAMmC,QAAQG,OAEnD9B,KAAKR,MAAMmC,QAAQG,OAAOf,KAAOf,KAAKR,MAAMF,KAAKyC,SACjD,uBAAGI,KAAK,IAAIf,QAASpB,KAAKuB,gBAA1B,WACA,+BAHEvB,KAAKR,MAAM4C,WAAkE,+BAApD,uBAAGD,KAAK,IAAIf,QAASpB,KAAKyB,cAA1B,iB,GAlCbJ,aCgEfgB,E,kDA9DX,WAAY7C,GAAQ,IAAD,8BACf,cAAMA,IAEDC,MAAQ,CACT6C,SAAU,IAGd,EAAKC,mBAAqB,EAAKA,mBAAmB3C,KAAxB,gBAC1B,EAAK4C,eAAiB,EAAKA,eAAe5C,KAApB,gBARP,E,gEAYfI,KAAKR,MAAMH,OAAOoD,GAAG,UAAWzC,KAAKuC,sB,yCAGtBG,GACfC,QAAQC,IAAIF,GACZ,IAAIG,EAAc,GACdC,GAAQ,EACZ9C,KAAKP,MAAM6C,SAASS,SAAQ,SAAC5C,GACrBA,EAAMY,KAAO2B,EAAK3B,KAClB+B,GAAQ,EACR3C,EAAQuC,GAERvC,EAAM6C,QACNH,EAAYI,KAAK9C,MAGpB2C,GACDD,EAAYI,KAAKP,GAErBG,EAAYK,KAAKlD,KAAKwC,gBACtBG,QAAQC,IAAIO,KAAKC,UAAUP,IAC3B7C,KAAKC,SAAS,CAAEqC,SAAUO,M,qCAGfQ,EAAGC,GACd,OAAID,EAAEvB,SAAWwB,EAAExB,QAAgB,EAC/BwB,EAAExB,SAAWuB,EAAEvB,OAAe,EAC3B,I,kCAIP,OAAI9B,KAAKR,MAAMF,KAAK4C,QACR,kBAAC,EAAD,CAAgB7C,OAAQW,KAAKR,MAAMH,SAEvC,iC,wCAGO,IAAD,OACd,OAAOW,KAAKP,MAAM6C,SAASiB,KAAI,SAAC5B,GAAD,OAAa,kBAAC,EAAD,CAAiBd,IAAKc,EAAQZ,GAAIqB,WAAY,EAAK5C,MAAM4C,WAAYT,QAASA,EAASrC,KAAM,EAAKE,MAAMF,KAAMD,OAAQ,EAAKG,MAAMH,c,+BAI7K,OAAQ,6BACJ,wBAAIqB,UAAU,wBAAd,YAA+CV,KAAKR,MAAMF,KAAKgB,MAC9DN,KAAKwD,YACLxD,KAAKyD,uB,GA3DQpC,aCmEXqC,E,kDAnEX,WAAYlE,GAAQ,IAAD,8BACf,cAAMA,IAEDC,MAAQ,CACTkE,QAAS,IAGb,EAAKhE,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBACpB,EAAKE,cAAe,EAAK8D,cAAchE,KAAnB,gBATL,E,yDAYNG,GAC2B,KAAhCA,EAAMG,OAAOC,MAAM0D,OAAO,KAC1B9D,EAAMG,OAAOC,MAAQJ,EAAMG,OAAOC,MAAM2D,OAAO,IAEnD9D,KAAKC,SAAS,CAAE0D,QAAS5D,EAAMG,OAAOC,U,mCAM7BJ,GACTC,KAAK4D,gBACL7D,EAAMK,mB,sCAIN,GAAKJ,KAAKP,MAAMkE,QAAhB,CAEA,IAAIA,EAAU3D,KAAKP,MAAMkE,QAazB3D,KAAKR,MAAMH,OAAOgB,KAAK,cAAe,CAAEsD,QAASA,IACjDpD,SAASC,eAAe,qBAAqBL,MAb7B,GAchBH,KAAKC,SAAS,CAAC0D,QAdC,Q,+BAiBV,IAAD,OACL,OAAQ,6BACJ,kBAAClD,EAAA,EAAD,CAAYC,UAAU,OAAOqD,UAAY/D,KAAKR,MAAMmC,QAAUhB,SAAUX,KAAKL,aAAcQ,MAAOH,KAAKP,MAAMkE,QAAS/C,WAAY,SAAAb,GAA4B,UAAdA,EAAMc,KAClJ,EAAK+C,gBAEL,EAAKnE,MAAMkE,QAAQK,OAAS,IAAyB,KAAnBjE,EAAMkE,UACxC,EAAKL,kBAEL,kBAAC9C,EAAA,EAAD,CAAaC,GAAG,oBACZC,YAAY,8BAEhB,kBAACP,EAAA,EAAWQ,OAAZ,KACI,kBAACC,EAAA,EAAD,CAAQC,QAAQ,kBAAkBC,QAASpB,KAAKH,cAAhD,e,GA7DKwB,aC2BV6C,E,kDAzBX,WAAY1E,GAAQ,IAAD,8BACf,cAAMA,IACD2E,cAAgB,EAAKA,cAAcvE,KAAnB,gBAFN,E,4DAMfI,KAAKR,MAAMH,OAAOgB,KAAK,iBAAkB,CAAC+D,UAAWpE,KAAKR,MAAMmE,QAAQ5C,O,+BAIxE,OAAO,yBAAKL,UAAU,wBAAuB,kBAACkB,EAAA,EAAUC,KAAX,CAAgBV,QAAUnB,KAAKR,MAAMmE,QAAQU,UAExF,SADDrE,KAAKR,MAAMmE,QAAQW,KAAmB,UAAZ,WAEvB,4BAAI,2BAAItE,KAAKR,MAAMmE,QAAQhC,QAAQrB,KAA/B,KAAJ,IAA+CN,KAAKR,MAAMmE,QAAQA,SAClE,kBAAC3B,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KAAK,sCAAYjC,KAAKR,MAAMmE,QAAQ7B,OAAOxB,OAE3C,kBAAC2B,EAAA,EAAD,CAAKvB,UAAU,cAAgBV,KAAKR,MAAMmE,QAAQU,WAAcrE,KAAKR,MAAMmE,QAAQW,KAC7B,2BAAKtE,KAAKR,MAAMmE,QAAQU,UAAa,UAAY,QAAvG,uBAAGlC,KAAK,IAAIf,QAASpB,KAAKmE,eAA1B,kB,GAnBc9C,aCoEfkD,E,kDAlEX,WAAY/E,GAAQ,IAAD,8BACf,cAAMA,IAMVgF,eAAiB,WACb,EAAKC,YAAYC,eAAe,CAAEC,SAAU,YAN5C,EAAKlF,MAAQ,CAAEmF,SAAU,IACzB,EAAKC,mBAAqB,EAAKA,mBAAmBjF,KAAxB,gBAHX,E,gEAYfI,KAAKR,MAAMH,OAAOoD,GAAG,UAAWzC,KAAK6E,sB,yCAGtBnC,GAEf,IAAK1C,KAAKR,MAAMF,KAAK4C,QAAS,CAC1B,IAAKlC,KAAKR,MAAM4C,WACZ,OAEJ,GAAIM,EAAKf,QAAQZ,KAAOf,KAAKR,MAAM4C,WAAWrB,GAC1C,OAGR,IAAI+D,EAAc,GACdhC,GAAQ,EACZ9C,KAAKP,MAAMmF,SAAS7B,SAAQ,SAAC5C,GACrBA,EAAMY,KAAO2B,EAAK3B,KAClB+B,GAAQ,EACR3C,EAAQuC,GAERvC,EAAM6C,QACN8B,EAAY7B,KAAK9C,MAGpB2C,GACDgC,EAAY7B,KAAKP,GAErB1C,KAAKC,SAAS,CAAC2E,SAAUE,M,2CAIzB9E,KAAKwE,mB,wCAGU,IAAD,OACd,OAAOxE,KAAKP,MAAMmF,SAASrB,KAAI,SAACI,GAAD,OAAa,kBAAC,EAAD,CAAiB9C,IAAK8C,EAAQ5C,GAAIqB,WAAY,EAAK5C,MAAM4C,WAAYuB,QAASA,EAASrE,KAAM,EAAKE,MAAMF,KAAMD,OAAQ,EAAKG,MAAMH,c,+BAGvK,IAAD,OACL,OACI,kBAAC4C,EAAA,EAAD,CAAK8C,MAAO,CAACC,OAAQ,QAASC,GAAG,MAC7B,yBAAKvE,UAAU,kBACf,yBAAKK,GAAG,cAAcmE,MAAM,gBACvBlF,KAAKmF,kBACN,yBAAKJ,MAAO,CAAEK,MAAM,OAAQC,MAAO,QAC/BC,IAAK,SAACC,GAAS,EAAKd,YAAcc,OAGxCvF,KAAKR,MAAMF,KAAK4C,SAAWlC,KAAKR,MAAM4C,WAAa,yBAAK2C,MAAO,CAACS,MAAO,OAAQC,OAAO,EAAGC,SAAU,aAAa,kBAAC,EAAD,CAAYrG,OAAQW,KAAKR,MAAMH,OAAQ+C,WAAYpC,KAAKR,MAAM4C,cAAuB,qC,GA7D/Lf,aC0CTsE,E,kDAxCX,WAAYnG,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTmG,eAAgB,MAHL,E,gEAOE,IAAD,OACZ5F,KAAKR,MAAMF,KAAK4C,SAGpBlC,KAAKR,MAAMH,OAAOoD,GAAG,WAAW,SAACC,GAGxBA,EAAKZ,OAUNY,EAAKZ,OAAOf,KAAO,EAAKvB,MAAMF,KAAKyC,UACnC,EAAK9B,SAAS,CAAE2F,eAAgBlD,IAV5B,EAAKjD,MAAMmG,gBACP,EAAKnG,MAAMmG,eAAe7E,KAAO2B,EAAK3B,IACtC,EAAKd,SAAS,CAAE2F,eAAgB,Y,+BAchD,OAAQ,yBAAKV,MAAM,iBACf,kBAAClD,EAAA,EAAD,CAAK+C,MAAO,CAACc,OAAQ,EAAGb,OAAQ,SAC5B,kBAAC/C,EAAA,EAAD,CAAKgD,GAAG,KAAKa,GAAG,IAAIC,GAAG,KAAI,kBAAC,EAAD,CAAa1G,OAAQW,KAAKR,MAAMH,OAAQC,KAAMU,KAAKR,MAAMF,KAAM8C,WAAYpC,KAAKP,MAAMmG,kBACjH,kBAAC3D,EAAA,EAAD,CAAKgD,GAAG,KAAKa,GAAG,IAAIC,GAAG,KAAI,kBAAC,EAAD,CAAW1G,OAAQW,KAAKR,MAAMH,OAAQC,KAAMU,KAAKR,MAAMF,KAAM8C,WAAYpC,KAAKP,MAAMmG,wB,GApCxGvE,a,2BC2CR2E,E,kDA5CX,WAAYxG,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CAAEoB,IAAK,IAEpB,EAAKlB,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBALL,E,yDAQNG,GACTC,KAAKC,SAAS,CAAEY,IAAKd,EAAMG,OAAOC,U,mCAGzBJ,GACTC,KAAKR,MAAMyG,SAASjG,KAAKP,MAAMoB,KAC/Bd,EAAMK,mB,+BAKN,OACI,6BACI,kBAAC8F,EAAA,EAAD,KACI,kBAACjE,EAAA,EAAD,CAAKgD,GAAG,KAAKa,GAAI,CAAEK,KAAM,EAAGC,OAAQ,IAChC,kBAACC,EAAA,EAAD,KACI,kBAACA,EAAA,EAAKC,KAAN,KACI,kBAACD,EAAA,EAAKE,MAAN,iBACA,kBAACF,EAAA,EAAKG,SAAN,oEACA,kBAACC,EAAA,EAAD,CAAMC,SAAU1G,KAAKH,cACjB,kBAAC4G,EAAA,EAAKE,MAAN,YACA,kBAACF,EAAA,EAAKG,QAAN,CAAcC,KAAK,WAAW1G,MAAOH,KAAKP,MAAMoB,IAAKF,SAAUX,KAAKL,aAAcqB,YAAY,QAC9F,kBAACyF,EAAA,EAAKK,KAAN,CAAWpG,UAAU,cAArB,yBACA,kBAACQ,EAAA,EAAD,CAAQC,QAAQ,UAAU0F,KAAK,UAA/B,oB,GAhCZxF,a,iBRgCT0F,MA3Bf,WAAgB,IAAD,EAEWC,oBAAS,GAFpB,mBAENC,EAFM,KAEAC,EAFA,KAIb,SAASC,EAAmBtG,IAC1BxB,EAAS+H,IAAW,6BACb3E,GAAG,WAAW,WACnBE,QAAQC,IAAI,aACZvD,EAAOgB,KAAK,OAAQ,CAAEgH,MAAOxG,OAE/BxB,EAAOoD,GAAG,mBAAmB,SAACC,GAC5BpD,EAAOoD,EAAKpD,KACZ4H,GAAQ,MAQZ,OACE,yBAAKxG,UAAU,OAJPuG,EAAQ,kBAAC,EAAD,CAAU3H,KAAMA,EAAMD,OAAQA,IAAa,kBAAC,EAAD,CAAW4G,SAAWkB,MSbjEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFtH,SAASC,eAAe,SDwHpB,kBAAmBsH,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1F,QAAQ0F,MAAMA,EAAMC,c","file":"static/js/main.39006fc3.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport MainPage from './pages/MainPage'\nimport LoginPage from './pages/LoginPage'\nimport openSocket from 'socket.io-client';\n\nlet socket;\nlet user;\n\nfunction App() {\n\n  const [auth, setAuth] = useState(false);\n\n  function startSocketAndAuth(key) {\n    socket = openSocket(\"http://cc.dawnsheedy.com\");\n    socket.on('connect', function () {\n      console.log(\"connected\")\n      socket.emit('auth', { token: key });\n    });\n    socket.on('user-assignment', (data) => {\n      user = data.user;\n      setAuth(true);\n    });\n  }\n\n  function isAuth() {\n    return (auth) ? <MainPage user={user} socket={socket} /> : <LoginPage setToken={ startSocketAndAuth } />\n  }\n  \n  return (\n    <div className=\"App\">\n      {isAuth()}\n    </div>\n  );\n}\n\nexport default App;\n","import React, { Component } from 'react';\nimport { Form, Button, InputGroup, FormControl } from 'react-bootstrap';\n\nclass SpeakerCreator extends Component {\n\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            speakerName: \"\"\n        }\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.createSpeaker= this.createSpeaker.bind(this);\n    }\n\n    handleChange(event) {\n        this.setState({ speakerName: event.target.value });\n    }\n\n    handleSubmit(event) {\n        this.createSpeaker();\n        event.preventDefault();\n    }\n\n    createSpeaker() {\n        if (!this.state.speakerName) return;\n        this.props.socket.emit('new-speaker', { name: this.state.speakerName });\n        document.getElementById('createSpeakerForm').value = '';\n        this.setState({speakerName: ''});\n    }\n\n    render() {\n        return (<div>\n            <InputGroup className=\"mb-3\" onChange={this.handleChange} value={this.state.speakerName} onKeyPress={event => { if(event.key === \"Enter\") {\n                this.createSpeaker();\n            }}}>\n                <FormControl id='createSpeakerForm'\n                    placeholder=\"SuperMCGamer\"\n                />\n                <InputGroup.Append>\n                    <Button variant=\"outline-primary\" onClick={this.handleSubmit}>Create</Button>\n                </InputGroup.Append>\n            </InputGroup>\n            <hr />\n        </div>)\n    }\n}\n\nexport default SpeakerCreator;","/* eslint-disable jsx-a11y/anchor-is-valid */\nimport React, {Component} from 'react';\nimport { ListGroup, Col, Row } from 'react-bootstrap';\n\nclass SpeakerListItem extends Component {\n    constructor(props) {\n        super(props)\n        this.releaseSpeaker = this.releaseSpeaker.bind(this);\n        this.deleteSpeaker = this.deleteSpeaker.bind(this);\n        this.claimSpeaker = this.claimSpeaker.bind(this);\n    }\n\n    releaseSpeaker() {\n        this.props.socket.emit('release', {speakerId: this.props.speaker.id})\n    }\n\n    deleteSpeaker() {\n        this.props.socket.emit('delete-speaker', {speakerId: this.props.speaker.id})\n    }\n\n    claimSpeaker() {\n        this.props.socket.emit('claim-speaker', {speakerId: this.props.speaker.id})\n    }\n\n    render() {\n        return(<div className=\"transition-container\"><ListGroup.Item variant={this.props.speaker.writer ? \n        this.props.speaker.writer.id===this.props.user.writerId ? 'primary' : 'success' \n        : 'danger'}>\n            <h5>{this.props.speaker.name}</h5>\n            <Row>\n                <Col>{(this.props.speaker.writer) ? <p>Claimed by: {this.props.speaker.writer.name}</p> : <p>Unclaimed</p>}</Col>\n                \n                {this.props.user.isAdmin ? <Col className=\"text-right\">{(this.props.speaker.writer) ? \n                <a href=\"#\" onClick={this.releaseSpeaker}>Release</a> : \n                <a href=\"#\" onClick={this.deleteSpeaker}>Delete</a>}\n                </Col> : \n\n                <Col className=\"text-right\">{(!(this.props.speaker.writer)) ? \n                !(this.props.assignment) ? <a href=\"#\" onClick={this.claimSpeaker}>Claim</a> : <span></span> : \n                this.props.speaker.writer.id === this.props.user.writerId ?\n                <a href=\"#\" onClick={this.releaseSpeaker}>Release</a>:\n                <span></span>}\n                </Col>}\n            </Row>\n        </ListGroup.Item></div>)\n    }\n}\n\nexport default SpeakerListItem;\n\n","import React, { Component } from 'react';\nimport SpeakerCreator from './speaker-creator';\nimport SpeakerListItem from './speaker-list-item'\n\nclass SpeakerList extends Component {\n\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            speakers: []\n        }\n\n        this.handleSpeakerEvent = this.handleSpeakerEvent.bind(this);\n        this.speakerCompare = this.speakerCompare.bind(this);\n    }\n\n    componentDidMount() {\n        this.props.socket.on('speaker', this.handleSpeakerEvent);\n    }\n\n    handleSpeakerEvent(data) {\n        console.log(data);\n        let newSpeakers = [];\n        let found = false;\n        this.state.speakers.forEach((value) => {\n            if (value.id === data.id) {\n                found = true;\n                value = data;\n            }\n            if (value.status) {\n                newSpeakers.push(value);\n            }\n        })\n        if (!found) {\n            newSpeakers.push(data);\n        }\n        newSpeakers.sort(this.speakerCompare);\n        console.log(JSON.stringify(newSpeakers))\n        this.setState({ speakers: newSpeakers });\n    }\n\n    speakerCompare(a, b) {\n        if (a.writer && !b.writer) return -1;\n        if (b.writer && !a.writer) return 1;\n        return 0;\n    }\n\n    getHeader() {\n        if (this.props.user.isAdmin) {\n            return (<SpeakerCreator socket={this.props.socket} />);\n        }\n        return (<span></span>)\n    }\n\n    drawSpeakerList() {\n        return this.state.speakers.map((speaker) => <SpeakerListItem key={speaker.id} assignment={this.props.assignment} speaker={speaker} user={this.props.user} socket={this.props.socket} />)\n    }\n\n    render() {\n        return (<div>\n            <h5 className=\"transition-container\">Welcome, {this.props.user.name}</h5>\n            {this.getHeader()}\n            {this.drawSpeakerList()}\n        </div>)\n    }\n}\n\nexport default SpeakerList;","import React, { Component } from 'react'\nimport { InputGroup, FormControl, Button } from 'react-bootstrap';\n\nclass CaptionBox extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            caption: \"\"\n        }\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.createSpeaker= this.createCaption.bind(this);\n    }\n\n    handleChange(event) {\n        if (event.target.value.charAt(0) == ' ') {\n            event.target.value = event.target.value.substr(1);\n        }\n        this.setState({ caption: event.target.value });\n        /*if (this.state.caption.length > 80) {\n            this.createCaption();\n        }*/\n    }\n\n    handleSubmit(event) {\n        this.createCaption();\n        event.preventDefault();\n    }\n\n    createCaption() {\n        if (!this.state.caption) return;\n\n        let caption = this.state.caption;\n        let remainder = '';\n\n        /*if (caption.length > 80) {\n            for (let i=80; i>=0; i--) {\n                if (caption.charAt(i) === ' ') {\n                    remainder = caption.substr(i+1);\n                    caption = caption.substr(0,i);\n                    break;\n                }\n            }\n        }*/\n\n        this.props.socket.emit('new-caption', { caption: caption });\n        document.getElementById('createCaptionForm').value = remainder;\n        this.setState({caption: remainder});\n    }\n\n    render() {\n        return (<div>\n            <InputGroup className=\"mb-3\" disabled={(!this.props.speaker)} onChange={this.handleChange} value={this.state.caption} onKeyPress={event => { if(event.key === \"Enter\") {\n                this.createCaption();\n            }\n            if (this.state.caption.length > 70 && event.charCode === 32) {\n                this.createCaption();\n            }}}>\n                <FormControl id='createCaptionForm'\n                    placeholder=\"Type along to audio here.\"\n                />\n                <InputGroup.Append>\n                    <Button variant=\"outline-primary\" onClick={this.handleSubmit}>Send</Button>\n                </InputGroup.Append>\n            </InputGroup>\n        </div>)\n    }\n}\n\nexport default CaptionBox;","/* eslint-disable jsx-a11y/anchor-is-valid */\nimport React, {Component} from 'react';\nimport { ListGroup, Col, Row } from 'react-bootstrap';\n\nclass CaptionListItem extends Component {\n    constructor(props) {\n        super(props)\n        this.deleteCaption = this.deleteCaption.bind(this);\n    }\n\n    deleteCaption() {\n        this.props.socket.emit('delete-caption', {captionId: this.props.caption.id})\n    }\n\n    render() {\n        return(<div className=\"transition-container\"><ListGroup.Item variant={!this.props.caption.cancelled ? \n        !this.props.caption.sent ? 'default' : 'success' \n        : 'danger'}>\n            <h5><b>{this.props.caption.speaker.name}:</b> {this.props.caption.caption}</h5>\n            <Row>\n                <Col><p>Writer: {this.props.caption.writer.name}</p></Col>\n\n                <Col className=\"text-right\">{(!this.props.caption.cancelled && !this.props.caption.sent) ? \n                <a href=\"#\" onClick={this.deleteCaption}>Delete</a> : <p>{(this.props.caption.cancelled) ? \"Deleted\" : \"Sent\"}</p>}\n                </Col>\n            </Row>\n        </ListGroup.Item></div>)\n    }\n}\n\nexport default CaptionListItem;\n\n","import React, { Component } from 'react';\nimport { Col } from 'react-bootstrap'\nimport CaptionBox from './caption-box'\nimport CaptionListItem from './caption-list-item'\n\nclass EventList extends Component {\n    constructor(props) {\n        super(props)\n        this.state = { captions: [] }\n        this.handleCaptionEvent = this.handleCaptionEvent.bind(this)\n    }\n\n    //From stackoverflow\n    scrollToBottom = () => {\n        this.messagesEnd.scrollIntoView({ behavior: \"smooth\" });\n    }\n\n    componentDidMount() {\n        this.props.socket.on('caption', this.handleCaptionEvent)\n    }\n\n    handleCaptionEvent(data) {\n        //Ignore stuff not assigned to us\n        if (!this.props.user.isAdmin) {\n            if (!this.props.assignment) {\n                return;\n            }\n            if (data.speaker.id !== this.props.assignment.id) {\n                return;\n            }\n        }\n        let newCaptions = [];\n        let found = false;\n        this.state.captions.forEach((value) => {\n            if (value.id === data.id) {\n                found = true;\n                value = data;\n            }\n            if (value.status) {\n                newCaptions.push(value);\n            }\n        })\n        if (!found) {\n            newCaptions.push(data);\n        }\n        this.setState({captions: newCaptions});\n    }\n\n    componentDidUpdate() {\n        this.scrollToBottom();\n    }\n\n    drawCaptionList() {\n        return this.state.captions.map((caption) => <CaptionListItem key={caption.id} assignment={this.props.assignment} caption={caption} user={this.props.user} socket={this.props.socket} />)\n    }\n\n    render() {\n        return(\n            <Col style={{height: \"100%\"}} xs='12'>\n                <div className=\"section-column\">\n                <div id=\"subtitleDiv\" class=\"subtitle-div\">\n                    {this.drawCaptionList()}\n                    <div style={{ float:\"left\", clear: \"both\" }}\n                        ref={(el) => { this.messagesEnd = el; }}>\n                    </div>\n                </div>\n                {!this.props.user.isAdmin && this.props.assignment ? <div style={{width: \"100%\", bottom:0, position: \"absolute\"}}><CaptionBox socket={this.props.socket} assignment={this.props.assignment} /></div> : <span></span>}\n                </div>\n            </Col>)\n    }\n}\n\nexport default EventList","import React, { Component } from 'react';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport SpeakerList from '../elements/speaker-list';\nimport EventList from '../elements/event-list'\n\nclass MainPage extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            currentSpeaker: null\n        }\n    }\n\n    componentDidMount() {\n        if (this.props.user.isAdmin) {\n            return;\n        }\n        this.props.socket.on('speaker', (data) => {\n\n            //If the received speaker has no writer and the ID matches the current one, it means it has been released\n            if (!data.writer) {\n                if (this.state.currentSpeaker) {\n                    if (this.state.currentSpeaker.id === data.id) {\n                        this.setState({ currentSpeaker: null })\n                    }\n                }\n                return;\n            }\n\n            //We've been assigned!\n            if (data.writer.id === this.props.user.writerId) {\n                this.setState({ currentSpeaker: data })\n            }\n        })\n    }\n\n    render() {\n        return (<div class=\"app-container\">\n            <Row style={{margin: 0, height: \"100%\" }}>\n                <Col xs=\"12\" md=\"4\" lg=\"4\"><SpeakerList socket={this.props.socket} user={this.props.user} assignment={this.state.currentSpeaker}/></Col>\n                <Col xs=\"12\" md=\"8\" lg=\"8\"><EventList socket={this.props.socket} user={this.props.user} assignment={this.state.currentSpeaker} /></Col>\n            </Row>\n        </div>)\n    }\n}\n\nexport default MainPage;","import React, { Component } from 'react';\nimport { Container, Col, Card, Form, Button } from 'react-bootstrap';\n\nclass LoginPage extends Component {\n    constructor(props) {\n        super(props)\n        this.state = { key: '' };\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleChange(event) {\n        this.setState({ key: event.target.value });\n    }\n\n    handleSubmit(event) {\n        this.props.setToken(this.state.key);\n        event.preventDefault();\n    }\n\n\n    render() {\n        return (\n            <div>\n                <Container>\n                    <Col xs=\"12\" md={{ span: 4, offset: 4 }}>\n                        <Card>\n                            <Card.Body>\n                                <Card.Title>CC Login</Card.Title>\n                                <Card.Subtitle>You should have received a key. Reach out to Tech for help.</Card.Subtitle>\n                                <Form onSubmit={this.handleSubmit}>\n                                    <Form.Label>Key</Form.Label>\n                                    <Form.Control type=\"password\" value={this.state.key} onChange={this.handleChange} placeholder=\"Key\"></Form.Control>\n                                    <Form.Text className=\"text-muted\">Never share your key.</Form.Text>\n                                    <Button variant=\"primary\" type=\"submit\">\n                                        Submit\n                                </Button>\n                                </Form>\n                            </Card.Body>\n                        </Card>\n                    </Col>\n                </Container>\n            </div>\n        )\n    }\n}\n\nexport default LoginPage;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './bootstrap.min.css';\nimport './App.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}